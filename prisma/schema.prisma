// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model AdminUser {
  id             String           @id @unique @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  password       String
  applicationLog ApplicationLog[]
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  email        String        @unique
  phone        String
  firstName    String
  lastName     String
  address1     String
  address2     String
  city         String
  state        String
  zip          String
  applications Application[]
  loyalty      Loyalty[]
}

model Application {
  id                Int                    @id @default(autoincrement())
  user              User                   @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  positionDesired   String
  dateAvailable     String
  availability      String?
  salaryDesired     Int
  currentlyEmployed Boolean?
  archived          Boolean                @default(false)
  education         ApplicationEducation[]
  history           ApplicationHistory[]
  references        ApplicationReference[]
  log               ApplicationLog[]
}

model ApplicationLog {
  id            Int                  @id @default(autoincrement())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  adminUser     AdminUser            @relation(fields: [adminUserId], references: [id])
  adminUserId   String
  application   Application          @relation(fields: [applicationId], references: [id])
  applicationId Int
  action        ApplicationLogAction
}

enum ApplicationLogAction {
  ARCHIVE
  VIEW
}

model ApplicationEducation {
  id            Int         @id @default(autoincrement())
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  type          String?
  name          String
  location      String
  subjects      String
  completed     Boolean?
}

model ApplicationHistory {
  id              Int         @id @default(autoincrement())
  applicationId   Int
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  companyName     String
  companyLocation String
  positionTitle   String
  positionDates   Json
}

model ApplicationReference {
  id            Int         @id @default(autoincrement())
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  name          String
  yearsKnown    Int
  address       String
  phone         String
}

model Loyalty {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  surveyJson Json
}
